<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tsb.mbg.dao.SysUserMapper">

  <cache/>
  <cache-ref namespace="com.tsb.mbg.dao.SysRoleMapper"/>

  <resultMap id="BaseResultMap" type="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="user_name" jdbcType="VARCHAR" property="userName"/>
    <result column="user_password" jdbcType="VARCHAR" property="userPassword"/>
    <result column="user_email" jdbcType="VARCHAR" property="userEmail"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>

  <resultMap id="BaseResultMapRoles" extends="BaseResultMap" type="com.tsb.mbg.entity.SysUser">
    <association property="roleList" columnPrefix="role_" resultMap="com.tsb.mbg.dao.SysRoleMapper.BaseResultMap"/>
  </resultMap>

  <select id="selectUserAndRoleById9" resultMap="BaseResultMapRoles">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id          role_id,
           r.role_name   role_role_name,
           r.enabled     role_enabled,
           r.create_by   role_createBy,
           r.create_time role_createTime
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on r.id = ur.role_id
    where u.id = #{id}
  </select>

  <select id="selectUserAndRoleById" resultMap="BaseResultMap">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id          "role.id", /*将映射到BaseResultMap-&gt;SysUser-&gt;role属性上*/
           r.role_name   "role.role_name",
           r.enabled     "role.enabled",
           r.create_by   "role.create_by",
           r.create_time "role.create_time"
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on r.id = ur.role_id
    where u.id = #{id}
  </select>


  <!--调用存储过程, 先设置statementType="CALLABLE"-->
  <!--存储过程不支持mybatis二级缓存useCache="false"-->
  <!--模式有in, out, inout三种, out模式的参数必须指定jdbcType, _byte对应java基本类型byte, byte对应Byte-->
  <!--在IN模式下, MyBatis提供了默认的jdbcType, 在OUT模式下没有提供-->
  <select id="selectUserById" statementType="CALLABLE" useCache="false">
    {call select_user_by_id(
            #{id, mode=IN},
            #{userName, mode=OUT, jdbcType=VARCHAR},
            #{userPassword, mode=OUT, jdbcType=VARCHAR},
            #{userEmail, mode=OUT, jdbcType=VARCHAR},
            #{userInfo, mode=OUT, jdbcType=VARCHAR},
            #{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
            #{createTime, mode=OUT, jdbcType=TIMESTAMP}
      )}
  </select>

  <select id="selectById" flushCache="false" resultMap="com.tsb.mbg.dao.SysUserMapper.BaseResultMap">
    select *
    from sys_user
    where id = #{id}
  </select>

  <select id="selectUserPage" statementType="CALLABLE" useCache="false"
          resultMap="com.tsb.mbg.dao.SysUserMapper.BaseResultMap">
    {call select_user_page(
            #{userName, mode=IN},
            #{offset, mode=IN},
            #{limit, mode=IN},
            #{total, mode=OUT, jdbcType=BIGINT}
      )}
  </select>

  <insert id="insertUserAndRoles" statementType="CALLABLE">
    {call insert_user_and_roles(
            #{user.id, mode=OUT ,jdbcType=BIGINT},
            #{user.userName, mode=IN},
            #{user.userPassword, mode=IN},
            #{user.userEmail, mode=IN},
            #{user.userInfo, mode=IN},
            #{user.headImg, mode=IN , jdbcType=BLOB},
            #{user.createTime, mode=OUT, jdbcType=TIMESTAMP},
            #{roleIds, mode=IN}
      )}
  </insert>

  <delete id="deleteUserById" statementType="CALLABLE">
    {call delete_user_by_id(#{id, mode=IN})}
  </delete>

  <resultMap id="RolePrivilegeListMap" extends="com.tsb.mbg.dao.SysRoleMapper.BaseResultMap"
             type="com.tsb.mbg.entity.SysRole">
    <collection property="sysPrivilegeList" columnPrefix="privilege_"
                javaType="java.util.List"
                ofType="com.tsb.mbg.entity.SysPrivilege"
                resultMap="com.tsb.mbg.dao.SysPrivilegeMapper.BaseResultMap"/>
  </resultMap>
  <!--extends通过mapper的namespace进行关联其它xml文件的resultMap-->
  <resultMap id="UserRoleListMap" extends="com.tsb.mbg.dao.SysUserMapper.BaseResultMap"
             type="com.tsb.mbg.entity.SysUser">
    <collection property="roleList" columnPrefix="role_"
                javaType="java.util.List"
                ofType="com.tsb.mbg.entity.SysRole"
                resultMap="RolePrivilegeListMap"/>
  </resultMap>

  <select id="selectAllUserAndRoles2" resultMap="UserRoleListMap">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id             role_id,
           r.role_name      role_role_name,
           r.enabled        role_enabled,
           r.create_by      role_create_by,
           r.create_time    role_create_time,
           p.id             role_privilege_id,
           p.privilege_name role_privilege_privilege_name,
           p.privilege_url  role_privilege_privilege_url
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on ur.role_id = r.id
           inner join sys_role_privilege rp on rp.role_id = r.id
           inner join sys_privilege p on p.id = rp.privilege_id
  </select>

  <select id="selectAllRoleAndPrivilege" resultMap="RolePrivilegeListMap">
    select r.id,
           r.role_name,
           r.enabled,
           r.create_by,
           r.create_time,
           p.id             privilege_id,
           p.privilege_name privilege_privilege_name,
           p.privilege_url  privilege_privilege_url
    from sys_role r
           inner join sys_role_privilege rp on rp.role_id = r.id
           inner join sys_privilege p on p.id = rp.privilege_id
  </select>

  <resultMap id="UserRoleListMapSelect" type="com.tsb.mbg.entity.SysUser"
             extends="com.tsb.mbg.dao.SysUserMapper.BaseResultMap">
    <!--所有嵌套查询都配置为延迟加载, 避免了N+1问题(多执行几条毫无意义的SQL)-->
    <collection property="roleList"
                fetchType="lazy"
                select="com.tsb.mbg.dao.SysRoleMapper.selectRoleByUserId"
                column="{userId=id}"/>
  </resultMap>

  <select id="selectAllUserAndRolesSelect" resultMap="UserRoleListMapSelect">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time
    from sys_user u
    where u.id = #{id}
  </select>


  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="user_info" jdbcType="LONGVARCHAR" property="userInfo"/>
    <result column="head_img" jdbcType="LONGVARBINARY" property="headImg"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_name, user_password, user_email, create_time
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    user_info, head_img
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.tsb.mbg.entity.SysUserExample"
          resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from sys_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.tsb.mbg.entity.SysUserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from sys_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="startRow != null">
      limit #{startRow} , #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.tsb.mbg.entity.SysUserExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sys_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_user (user_name, user_password, user_email,
    create_time, user_info, head_img
    )
    values (#{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR},
    #{createTime,jdbcType=TIMESTAMP}, #{userInfo,jdbcType=LONGVARCHAR}, #{headImg,jdbcType=LONGVARBINARY}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        user_name,
      </if>
      <if test="userPassword != null">
        user_password,
      </if>
      <if test="userEmail != null">
        user_email,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="userInfo != null">
        user_info,
      </if>
      <if test="headImg != null">
        head_img,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userInfo != null">
        #{userInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="headImg != null">
        #{headImg,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tsb.mbg.entity.SysUserExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from sys_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userPassword != null">
        user_password = #{record.userPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.userEmail != null">
        user_email = #{record.userEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userInfo != null">
        user_info = #{record.userInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.headImg != null">
        head_img = #{record.headImg,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    set id = #{record.id,jdbcType=BIGINT},
    user_name = #{record.userName,jdbcType=VARCHAR},
    user_password = #{record.userPassword,jdbcType=VARCHAR},
    user_email = #{record.userEmail,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    user_info = #{record.userInfo,jdbcType=LONGVARCHAR},
    head_img = #{record.headImg,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    set id = #{record.id,jdbcType=BIGINT},
    user_name = #{record.userName,jdbcType=VARCHAR},
    user_password = #{record.userPassword,jdbcType=VARCHAR},
    user_email = #{record.userEmail,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        user_email = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userInfo != null">
        user_info = #{userInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="headImg != null">
        head_img = #{headImg,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    set user_name = #{userName,jdbcType=VARCHAR},
    user_password = #{userPassword,jdbcType=VARCHAR},
    user_email = #{userEmail,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    user_info = #{userInfo,jdbcType=LONGVARCHAR},
    head_img = #{headImg,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tsb.mbg.entity.SysUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_user
    set user_name = #{userName,jdbcType=VARCHAR},
    user_password = #{userPassword,jdbcType=VARCHAR},
    user_email = #{userEmail,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <cache eviction="LRU" size="1024">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
  </cache>
  <resultMap extends="BaseResultMap" id="BaseResultMap2" type="com.tsb.mbg.entity.SysUser">
    <result column="role_id" property="role.id"/>
    <result column="role_name" property="role.roleName"/>
    <result column="enabled" property="role.enabled"/>
    <result column="create_by" property="role.createBy"/>
    <result column="role_create_time" jdbcType="TIMESTAMP" property="role.createTime"/>
  </resultMap>

  <resultMap id="RoleMap" type="com.tsb.mbg.entity.SysRole">
    <result column="id" property="id"/>
    <result column="role_name" property="roleName"/>
    <result column="enabled" property="enabled"/>
    <result column="create_by" property="createBy"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="BaseResultMap3" type="com.tsb.mbg.entity.SysUser">
    <!--property实体类中的属性名, javaType实体类的类型-->
    <!--columnPrefix查询列的前缀, 配置后可以省略子标签result的column属性的值的前缀-->
    <association columnPrefix="role_" javaType="com.tsb.mbg.entity.SysRole" property="role" resultMap="RoleMap"/>
  </resultMap>

  <resultMap extends="BaseResultMap" id="UserRoleMapSelect" type="com.tsb.mbg.entity.SysUser">
    <!--select: 另一个映射查询的id, 额外执行这个查询获取嵌套的结果-->
    <!--column: 列名, 将主查询的结果作为嵌套查询的参数, {id=role_id}, id作为嵌套查询的参数-->
    <!--fetchType: 数据加载方式, 可以覆盖全局lazyLoadingEnabled配置-->
    <!--property是SysUser的role属性, column将调用者的查询结果的role_id字段取出, 放入id作为参数传入select指定的额查询语句-->
    <association column="{id=role_id}" fetchType="lazy" property="role"
                 select="com.tsb.mbg.dao.SysRoleMapper.selectRoleById"/>
    <!--全局设置中aggressiveLazyLoading=true会导致对任意延迟加载的属性的调用, 使该属性所在的对象完全加载, 反之, 则按需加载; 该属性默认为true-->
  </resultMap>

  <select id="selectUserAndRoleByIdSelect" resultMap="UserRoleMapSelect">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           ur.role_id
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
    where u.id = #{id}
  </select>

  <resultMap extends="BaseResultMap" id="userRoleListMap" type="com.tsb.mbg.entity.SysUser">
    <id column="id" property="id"/>
    <result column="user_name" property="userName"/>
    <result column="user_password" property="userPassword"/>
    <result column="user_email" property="userEmail"/>
    <result column="user_info" property="userInfo"/>
    <result column="head_img" jdbcType="BLOB" property="headImg"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <!--property属性名, javaType属性类型, ofType属性泛型类型-->
    <collection columnPrefix="role_" javaType="java.util.List" ofType="com.tsb.mbg.entity.SysRole" property="roleList">
      <id column="id" property="id"/>
      <result column="role_name" property="roleName"/>
      <result column="enabled" property="enabled"/>
      <result column="create_by" property="createBy"/>
      <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </collection>
  </resultMap>

  <resultMap extends="BaseResultMap" id="userRoleListMap2" type="com.tsb.mbg.entity.SysUser">
    <collection columnPrefix="role_" property="roleList" resultMap="com.tsb.mbg.dao.SysRoleMapper.roleMap"/>
  </resultMap>

  <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id          role_id,
           r.role_name   role_role_name,
           r.enabled     role_enabled,
           r.create_by   role_create_by,
           r.create_time role_create_time
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on r.id = ur.role_id
  </select>


  <select id="selectUserAndRoleById2" resultMap="BaseResultMap2">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id          role_id,
           r.role_name   role_name,
           r.enabled     enabled,
           r.create_by   create_by,
           r.create_time role_create_time
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on r.id = ur.role_id
    where u.id = #{id}
  </select>

  <select id="selectUserAndRoleById3" resultMap="BaseResultMap3">
    select u.id,
           u.user_name,
           u.user_password,
           u.user_email,
           u.user_info,
           u.head_img,
           u.create_time,
           r.id          role_id,
           r.role_name   role_role_name,
           r.enabled     role_enabled,
           r.create_by   role_create_by,
           r.create_time role_create_time
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on r.id = ur.role_id
    where u.id = #{id}
  </select>
</mapper>